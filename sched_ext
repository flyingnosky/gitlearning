# Overview
本文档对sched_ext仓库提供了一个高层级的介绍，该仓库包含使用Linux kernel的sched_ext框架的用户定制CPU调度器的实现，以及支持util和开发的工具。
对于特定调度器的实现，请查看章节*调度器的实现*。
对于系统build和开发setup细节，请查看*Installation and setup*。
## What's sched_ext
sched_ext是实现了内核线程调度器到BPF并动态将其加载到运行的内核中。该框架允许安全且快速的迭代scheduler实现，动态的调度策略范围，可以在产品环境中实验和部署。
sched_ext开发的主要目的是将调度策略由之前静态的内核代码实现的转移到用户可编程的BPF程序决定，同时维持了安全的保证和内核级别调度要求的性能要求。
## System Architecture
sched_ext生态包含多个层级，这些层级一起为定制的CPU调度提供了完整的框架。
[Framework]
架构允许这样一个层级方法：BPF程序运行在内核空间可以访问调度的组件，用户态组件提供策略逻辑，Monitor和开发工具。
## Scheduler implementation Patterns
仓库中不同的调度器根据调度决策位置遵循不同的架构模式。
[]
模式多样性允许开发者在性能（BPF执行）和灵活性（用户态逻辑）之间根据自己特定的调度要求选择合适的方法。
## Key Components
Component        Location        Purpose
sched_ext      kernel module    Provides BPF hooks and scheduler registration
common.bpf.h   scheds/include/  Shared BPF helper functions and macros
scx_utils      rust/scx_utils/  Rust utility library for topology, CPU masks etc
scx_rustland_core  scx_utils    Framework for userspace-centric schedulers
## Scheduler Implementations
scheduler        Type              Description
scx_simple       Pure BPF          Basic global vtime scheduler
scx_layered      Hybrid            Multi-layer scheduler with BPF dispatch + Rust policy
scx_lavd         Hybrid            Latency-aware virtual deadline scheduler
scx_rustland    Userspace-centric  Most scheduling decision in Rust userspace
scx_rusty        Hybrid            Multi-domain load balancer
scx_bpfland      Hybrid            vruntime-based interactive workload scheduler
## Development Inftrastructure
[]
build系统自动处理依赖管理，包括从libbpf和bpftool的repo仓库获取和编译。
## Usage and Operation
### Basic Usage Pattern
sched_ext调度器的基础使用比较直接，运行调度器二进制并加载到kernel：
···
# Check current scheduler state
cat /sys/kernel/sched_ext/state
# Run a scheduler (loads into kernel)
scx_simple
···
简单的接口隐藏了BPF程序加载的复杂性，内核的注册以及调度器生命周期的管理。
### Monitoring and Observability
[]
调度器提供了多个monitor接口，从内置的统计信息到外部的Monitor工具，使能了调度器行为的可视化。
### Kernal support and Compatibility
通过结构化的版本管理，仓库维护跨内核版本件的兼容性。
Kernel branch            status              Purpose
sched_ext/for-next      Development          Latest sched_ext features
bpf/bpf-next            Integration          BPF subsystem integration
stable/linux-rolling-stable  stable          Production-ready releases
Various stable branches       Backports      Support for older kernels
文件kernel-verison.json跟踪commit hash，内核版本，每个分支的metadata，保证跨内核版本的可复制性。
整个overview是理解sched_ext生态的基础。

